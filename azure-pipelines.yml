stages:
  - stage: test
    displayName: Build & Test

    jobs:
      - job:
        strategy:
          matrix:
            Linux (gcc 7, 32-bit):
              vmImage: "ubuntu-18.04"
              CC: gcc-7 -m32
              CXX: g++-7 -m32
              TEST_X86: 1
            Linux (gcc 9):
              vmImage: "ubuntu-latest"
              CC: gcc-9
              CXX: g++-9
            Linux (clang 9):
              vmImage: "ubuntu-latest"
              CC: clang-9
              CXX: clang++-9
            macOS:
              vmImage: "macOs-latest"
            Windows (VS2017, 32bit):
              vmImage: "vs2017-win2016"
              TEST_X86: 1
            Windows (latest):
              vmImage: "windows-latest"
            # MSYS2MinGW:
            #   vmImage: "windows-latest"
            #   CC: clang -fuse-ld=lld
            #   CXX: clang++ -fuse-ld=lld
            #   CMAKE_GENERATOR: Ninja
            #   MSYS_PATH : C:\tools\msys64
            # The Android emulator is currently only available on macos, see:
            # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops#test-on-the-android-emulator
            Android (API 16, NDK 19):
              vmImage: "macOs-latest"
              ANDROID_API: 16
              ANDROID_NDK: 19.2.5345600
            Android (API 29 NDK 21):
              vmImage: "macOs-latest"
              ANDROID_API: 29
              ANDROID_NDK: 21.0.6113669
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self
            fetchDepth: 5
            submodules: recursive
          - task: UsePythonVersion@0
          - script: sudo apt update && sudo apt install libcurl4 libcurl4-openssl-dev
            condition: eq(variables['Agent.OS'], 'Linux')
            displayName: Installing Linux Dependencies
          - script: sudo apt update && sudo apt install gcc-multilib g++-multilib
            condition: and(eq(variables['Agent.OS'], 'Linux'), variables['TEST_X86'])
            displayName: Installing Linux 32-bit Dependencies
          # ignoring checksums: choco has 2.72, whereas upstream is 2.73
          - script: choco install sigcheck --ignore-checksums
            condition: eq(variables['Agent.OS'], 'Windows_NT')
            displayName: Installing Windows Dependencies
          - script: |
              export ANDROID_IMAGE="system-images;android-$(ANDROID_API);google_apis;x86"
              echo "Downloading ndk;$(ANDROID_NDK) and $ANDROID_IMAGE"
              echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install \
                "ndk;$(ANDROID_NDK)" "$ANDROID_IMAGE" | \
                grep -v "\[=" || true # suppress the progress bar, so we get meaningful logs
            condition: variables['ANDROID_API']
            displayName: Installing Android SDK Dependencies
          - script: |
              bash scripts/start-android.sh
            condition: variables['ANDROID_API']
            displayName: Starting Android Simulator
          # - script: choco install --no-progress msys2
          #   condition: variables['MSYS_PATH']
          #   displayName: Install MSYS2
          # - powershell: |
          #       echo '##vso[task.prependpath]$(MSYS_PATH)\mingw64\bin'
          #       echo '##vso[task.prependpath]$(MSYS_PATH)\usr\bin'
          #   condition: variables['MSYS_PATH']
          #   displayName: Update path with MSYS2
          # - script: |
          #       pacman --noconfirm -S ^
          #         mingw-w64-x86_64-uasm ^
          #         mingw-w64-x86_64-clang ^
          #         mingw-w64-x86_64-lld ^
          #         mingw-w64-x86_64-ninja ^
          #         mingw-w64-x86_64-cmake
          #   condition: variables['MSYS_PATH']
          #   displayName: Install MSYS2 packages
          - script: |
              pip install --upgrade --requirement tests/requirements.txt
              pytest --capture=no --verbose tests
            displayName: Test

  - stage: package
    displayName: Create Release Archive
    dependsOn: test
    jobs:
      - job:
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            fetchDepth: 5
            submodules: recursive
          - task: DeleteFiles@1
            displayName: Remove all files not belonging in source archive
            inputs:
              contents: |
                build
                .*
                **/.git*
                azure*
                scripts
                Makefile
                external/breakpad/src/tools
                external/breakpad/src/processor
          - task: ArchiveFiles@2
            displayName: Create source archive
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)
              includeRootFolder: false
              archiveFile: "$(Build.ArtifactStagingDirectory)/sentry-native-source.zip"
          - task: PublishBuildArtifacts@1
            displayName: Publish source archive to Azure
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)/sentry-native-source.zip"
