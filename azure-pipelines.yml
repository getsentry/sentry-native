---
trigger:
  - "master"
  - "*-ci"

pr:
  - "master"

variables:
  ARTIFACT_DIR: "sentry-native-data"

stages:
  - stage: prepare_build_files
    displayName: Prepare sources
    jobs:
      - job: package_sources
        displayName: "; package sources"
        pool:
          vmImage: "macos-10.13"
        steps:
          - template: ./azure-pipelines/prescript-common.yml
          - bash: |
              set -eux

              # For compatibility between branch and PR builds.
              # $REVISION will always point at the tip of the tested branch.
              REVISION="${SYSTEM_PULLREQUEST_SOURCECOMMITID:-$BUILD_SOURCEVERSION}"
              bash bin/package.sh "$REVISION"
              mv out sp-sources
              zip -r sp-sources sp-sources/

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: "sp-sources.zip"
              artifactName: $(ARTIFACT_DIR)

  - stage: build_per_platform
    displayName: Build All
    jobs:
      # MacOS
      - template: azure-pipelines/build-platform.yml
        parameters:
          vmImage: "macos-10.13"
          platform: "macosx"
          buildSystem: "gmake2"
          buildScript: |
            CPUS=$(getconf _NPROCESSORS_ONLN)
            make help
            make -j${CPUS}
          testScript: |
            # Smoke tests
            ./bin/Release/example || true
            ./bin/Release/example_crashpad || true
            ./bin/Release/example_breakpad || true

            # Run tests
            ./bin/Release/test_sentry

      # Linux
      - template: azure-pipelines/build-platform.yml
        parameters:
          vmImage: "ubuntu-16.04"
          platform: "linux"
          buildSystem: "gmake2"
          installScript: |
            BUILDER_IMAGE="us.gcr.io/sentryio/sentry-native:builder"
            docker pull ${BUILDER_IMAGE} || true
            make linux-build-env DOCKER_BUILD_ARGS="--cache-from ${BUILDER_IMAGE}"
          buildScript: |
            cd ..
            CPUS=$(getconf _NPROCESSORS_ONLN)
            # Run the commands inside a Docker container
            make linux-run CMD="make -C premake help"
            make linux-run CMD="make -C premake -j${CPUS}"
          testScript: |
            # Smoke tests
            ./bin/Release/example || true
            ./bin/Release/example_breakpad || true
            ./bin/Release/example_breakpad || true

            # Run tests
            ./bin/Release/test_sentry

      # Windows
      - template: azure-pipelines/build-platform.yml
        parameters:
          vmImage: "vs2017-win2016"
          platform: "windows"
          buildSystem: "vs2017"
          buildScript: |
            MSBUILD="/c/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/MSBuild/15.0/Bin/MSBuild.exe"
            "$MSBUILD" Sentry-Native.sln //m //p:Configuration=Release //p:Platform=x64 //t:Clean,Build
          testScript: |
            # Smoke test
            ./bin/x86_64/Release/example.exe || true
            ./bin/x86_64/Release/example_crashpad.exe || true
            ./bin/x86_64/Release/example_breakpad.exe || true

            # Run tests
            ./bin/x86_64/Release/test_sentry.exe

      # Android
      - template: azure-pipelines/build-platform.yml
        parameters:
          vmImage: "macos-10.13"
          platform: "android"
          buildSystem: "androidmk"
          buildScript: |
            make -C .. android-build
          testScript: |
            # Do not run "configure" because we already have the build files
            make -C .. android-test ANDROID_NO_CONFIGURE=1

  - stage: package_all
    displayName: Package the final archive
    jobs:
      - job: package_all
        displayName: Package all platforms
        pool:
          vmImage: "macos-10.13"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: $(ARTIFACT_DIR)
              downloadPath: "."
          - bash: |
              set -eux

              mkdir out
              cd out
              unzip -q "../${ARTIFACT_DIR}/sp-sources.zip"

              PLATFORMS=(macosx windows linux android)

              # Copy gen_* directories from available archives
              for PLATFORM in "${PLATFORMS[@]}"; do
                rm -rf ./sentry-native
                unzip -q "../${ARTIFACT_DIR}/sentry-native-${PLATFORM}.zip"
                rm -rf "./sp-sources/gen_${PLATFORM}"
                mv "sentry-native/premake" "./sp-sources/gen_${PLATFORM}"
              done
              rm -rf ./sentry-native

              mv sp-sources sentry-native
              zip -r sentry-native-all sentry-native/

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: "out/sentry-native-all.zip"
              artifactName: $(ARTIFACT_DIR)
