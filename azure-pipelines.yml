stages:
  - stage: test
    displayName: Build & Test

    jobs:
      - job:
        strategy:
          matrix:
            Linux (gcc 7, 32-bit):
              vmImage: "ubuntu-latest"
              CC: gcc-7 -m32
              CXX: g++-7 -m32
              X32: 1
            Linux (gcc 7):
              vmImage: "ubuntu-latest"
              CC: gcc-7
              CXX: g++-7
            Linux (gcc 9):
              vmImage: "ubuntu-latest"
              CC: gcc-9
              CXX: g++-9
            Linux (clang 9):
              vmImage: "ubuntu-latest"
              CC: clang-9
              CXX: clang++-9
            macOS:
              vmImage: "macOs-latest"
            Windows (VS2017):
              vmImage: "vs2017-win2016"
            Windows (VS2017, 32bit):
              vmImage: "vs2017-win2016"
              X32: 1
            Windows (latest):
              vmImage: "windows-latest"
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self
            fetchDepth: 5
            submodules: recursive
          - task: UsePythonVersion@0
          # ignoring checksums: choco has 2.72, whereas upstream is 2.73
          - script: choco install sigcheck --ignore-checksums
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
          - script: |
              pip install --upgrade --requirement tests/requirements.txt
              pytest --capture=no --verbose tests
            displayName: Test

      - job: Android
        strategy:
          matrix:
            API16:
              ANDROID_API: 16
              ANDROID_NDK: 19.2.5345600
            API29:
              ANDROID_API: 29
              ANDROID_NDK: 21.0.6113669
        pool:
          # The Android emulator is currently only available on macos, see:
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops#test-on-the-android-emulator
          vmImage: "macOs-latest"
        variables:
          ANDROID_ARCH: x86
          ANDROID_IMAGE: system-images;android-$(ANDROID_API);google_apis;$(ANDROID_ARCH)
        steps:
          - checkout: self
            fetchDepth: 5
            submodules: recursive
          - script: |
              echo "Downloading ndk;$(ANDROID_NDK) and $(ANDROID_IMAGE)"
              echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install \
                "ndk;$(ANDROID_NDK)" "$(ANDROID_IMAGE)" | \
                grep -v "\[=" || true # suppress the progress bar, so we get meaningful logs
            displayName: Installing Android SDK Dependencies
          # See: https://developer.android.com/ndk/guides/cmake
          - script: |
              mkdir build && cd build
              cmake \
                -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk/$(ANDROID_NDK)/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=$(ANDROID_ARCH) \
                -DANDROID_NATIVE_API_LEVEL=$(ANDROID_API) \
                -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PWD \
                -DSENTRY_CURL_SUPPORT=OFF \
                ..
              cmake --build . --parallel --target sentry_test_unit
            displayName: Build
          - script: |
              bash scripts/start-android.sh
            timeoutInMinutes: 5 # because gettings things wrong here can hang the job for up to an hourâ€¦
            displayName: Starting Android Simulator
          - script: |
              export DEVICE_DIR="/data/local/tmp"
              $ANDROID_HOME/platform-tools/adb push ./build "${DEVICE_DIR}"
              $ANDROID_HOME/platform-tools/adb shell "cd ${DEVICE_DIR}/build && ./sentry_test_unit"
            displayName: Test

  - stage: package
    displayName: Create Release Archive
    dependsOn: test
    jobs:
      - job:
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            fetchDepth: 5
            submodules: recursive
          - task: DeleteFiles@1
            displayName: Remove all files not belonging in source archive
            inputs:
              contents: |
                build
                .*
                **/.git*
                azure*
                leak*
                scripts
                Makefile
          - task: ArchiveFiles@2
            displayName: Create source archive
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)
              includeRootFolder: false
              archiveFile: "$(Build.ArtifactStagingDirectory)/sentry-native-source.zip"
          - task: PublishBuildArtifacts@1
            displayName: Publish source archive to Azure
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)/sentry-native-source.zip"
