name: CI

on:
  push:
    branches:
      - master
      - "release/**"
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: make style

  build-ios:
    name: Xcode Build for iOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - run: |
          cmake -B sentry-native-xcode -GXcode -DCMAKE_SYSTEM_NAME=iOS
          xcodebuild build -project sentry-native-xcode/Sentry-Native.xcodeproj -sdk iphonesimulator

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux (old gcc, 32-bit)
            os: ubuntu-20.04
            CC: gcc-7
            CXX: g++-7
            TEST_X86: 1
          - name: Linux (new gcc)
            os: ubuntu-22.04
            CC: gcc-12
            CXX: g++-12
            # ERROR_ON_WARNINGS: 1
            # The GCC analyzer 10.0.1 (as on CI) has an internal compiler error
            # currently, and is not stable enough to activate.
            # RUN_ANALYZER: gcc
          - name: Linux (clang + asan + llvm-cov)
            os: ubuntu-22.04
            CC: clang-14
            CXX: clang++-14
            ERROR_ON_WARNINGS: 1
            RUN_ANALYZER: asan,llvm-cov
          - name: Linux (clang + kcov)
            os: ubuntu-22.04
            CC: clang-14
            CXX: clang++-14
            ERROR_ON_WARNINGS: 1
            RUN_ANALYZER: kcov
          - name: Linux (gcc + code-checker + valgrind)
            os: ubuntu-22.04
            RUN_ANALYZER: code-checker,valgrind
          - name: macOS (xcode llvm)
            os: macOs-11
            ERROR_ON_WARNINGS: 1
            SYSTEM_VERSION_COMPAT: 0
          - name: macOS (xcode llvm + universal)
            os: macOs-11
            ERROR_ON_WARNINGS: 1
            SYSTEM_VERSION_COMPAT: 0
            CMAKE_DEFINES: -DCMAKE_OSX_ARCHITECTURES=arm64;x86_64
          - name: macOS (clang + asan + llvm-cov)
            os: macOs-11
            CC: clang
            CXX: clang++
            ERROR_ON_WARNINGS: 1
            SYSTEM_VERSION_COMPAT: 0
            RUN_ANALYZER: asan,llvm-cov
          - name: Windows (old VS, 32-bit)
            os: windows-2019
            TEST_X86: 1
          - name: Windows (latest)
            os: windows-latest
          - name: LLVM-Mingw
            os: windows-latest
            TEST_MINGW: 1
            MINGW_PKG_PREFIX: x86_64-w64-mingw32
            MINGW_ASM_MASM_COMPILER: llvm-ml;-m64
          # The Android emulator is currently only available on macos, see:
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops#test-on-the-android-emulator
          - name: Android (old API/NDK)
            os: macOs-latest
            ANDROID_API: 16
            ANDROID_NDK: 20.1.5948944
            ANDROID_ARCH: x86
          - name: Android (new API/NDK)
            os: macOs-latest
            ANDROID_API: 32
            ANDROID_NDK: 25.0.8775105
            ANDROID_ARCH: x86_64

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      TEST_X86: ${{ matrix.TEST_X86 }}
      TEST_MINGW: ${{ matrix.TEST_MINGW }}
      ERROR_ON_WARNINGS: ${{ matrix.ERROR_ON_WARNINGS }}
      RUN_ANALYZER: ${{ matrix.RUN_ANALYZER }}
      ANDROID_API: ${{ matrix.ANDROID_API }}
      ANDROID_NDK: ${{ matrix.ANDROID_NDK }}
      ANDROID_ARCH: ${{ matrix.ANDROID_ARCH }}
      CMAKE_DEFINES: ${{ matrix.CMAKE_DEFINES }}
      SYSTEM_VERSION_COMPAT: ${{ matrix.SYSTEM_VERSION_COMPAT }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Installing Linux Dependencies
        if: ${{ runner.os == 'Linux' && !env['TEST_X86'] }}
        run: |
          sudo apt update
          sudo apt install cmake clang-14 clang-tools llvm kcov g++-12 valgrind zlib1g-dev libcurl4-openssl-dev

      - name: Installing Linux 32-bit Dependencies
        if: ${{ runner.os == 'Linux' && env['TEST_X86'] }}
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install cmake gcc-7-multilib g++-7-multilib zlib1g-dev:i386 libssl-dev:i386 libcurl4-openssl-dev:i386

      - name: Installing CodeChecker
        if: ${{ contains(env['RUN_ANALYZER'], 'code-checker') }}
        run: sudo snap install codechecker --classic

      - name: Expose llvm PATH for Mac
        if: ${{ runner.os == 'macOS' }}
        run: echo $(brew --prefix llvm@15)/bin >> $GITHUB_PATH
      
      - name: Installing LLVM-MINGW Dependencies
        if: ${{ runner.os == 'Windows' && env['TEST_MINGW'] }}
        shell: powershell
        env:
          MINGW_PKG_PREFIX: ${{ matrix.MINGW_PKG_PREFIX }}
          MINGW_ASM_MASM_COMPILER: ${{ matrix.MINGW_ASM_MASM_COMPILER }}
        run: |
          Start-Sleep -Milliseconds 1 # See: https://stackoverflow.com/a/49859001
          $LLVM_MINGW_RELEASE = "20220906";
          $LLVM_MINGW_PKG = "llvm-mingw-${LLVM_MINGW_RELEASE}-ucrt-x86_64"
          $LLVM_MINGW_DL_URL = "https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_RELEASE}/${LLVM_MINGW_PKG}.zip"
          $LLVM_MINGW_DL_SHA512 = "3c724dd0663558c7247d2cdde196b37dc54e49fb8c4065aef0274d69d92d2d023440505fe6f23e83476d56f4a39c105d551f998a4342e823a2d2705d7a73fe7c"
          $DL_BASEDIR = "${{ github.workspace }}\dl"
          $LLVM_MINGW_DL_PATH = "${DL_BASEDIR}\llvm-mingw.zip"
          if (!(Test-Path -Path "$DL_BASEDIR")) { New-Item -ItemType Directory -Force -Path "$DL_BASEDIR" }
          # Download LLVM-mingw
          $CurlArguments = '-s', '-Lf', '-o', "${LLVM_MINGW_DL_PATH}", "${LLVM_MINGW_DL_URL}"
          & curl.exe @CurlArguments
          $dl_zip_hash = Get-FileHash -LiteralPath "${LLVM_MINGW_DL_PATH}" -Algorithm SHA512
          if ($dl_zip_hash.Hash -eq $LLVM_MINGW_DL_SHA512) {
           Write-Host "Successfully downloaded LLVM-mingw .zip"
          } Else {
           Write-Error "The downloaded LLVM-mingw zip hash '$($dl_zip_hash.Hash)' does not match the expected hash: '$LLVM_MINGW_DL_SHA512'"
          }
          # Extract LLVM-mingw
          Write-Host "Extracting LLVM-mingw..."
          $LLVM_MINGW_INSTALL_PATH = "${{ github.workspace }}\buildtools\llvm-mingw"
          New-Item -ItemType Directory -Force -Path "${LLVM_MINGW_INSTALL_PATH}"
          Expand-Archive -LiteralPath "${LLVM_MINGW_DL_PATH}" -DestinationPath "${LLVM_MINGW_INSTALL_PATH}"
          # Export the LLVM-mingw install path
          $LLVM_MINGW_INSTALL_PATH = "${LLVM_MINGW_INSTALL_PATH}\${LLVM_MINGW_PKG}"
          echo "LLVM_MINGW_INSTALL_PATH=${LLVM_MINGW_INSTALL_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # Prepend bin path to the system PATH
          echo "Path to LLVM-mingw bin folder: ${LLVM_MINGW_INSTALL_PATH}\bin"
          echo "${LLVM_MINGW_INSTALL_PATH}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Download ninja-build
          $NINJA_DL_URL = "https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip"
          $NINJA_DL_SHA512 = "a700e794c32eb67b9f87040db7f1ba3a8e891636696fc54d416b01661c2421ff46fa517c97fd904adacdf8e621df3e68ea380105b909ae8b6651a78ae7eb3199"
          $NINJA_DL_PATH = "${DL_BASEDIR}\ninja-win.zip"
          $CurlArguments = '-s', '-Lf', '-o', "${NINJA_DL_PATH}", "${NINJA_DL_URL}"
          & curl.exe @CurlArguments
          $ninja_zip_hash = Get-FileHash -LiteralPath "${NINJA_DL_PATH}" -Algorithm SHA512
          if ($ninja_zip_hash.Hash -eq $NINJA_DL_SHA512) {
            Write-Host "Successfully downloaded Ninja-Build .zip"
          } Else {
            Write-Error "The downloaded Ninja-build zip hash '$($ninja_zip_hash.Hash)' does not match the expected hash: '$NINJA_DL_SHA512'"
          }
          Write-Host "Extracting Ninja-Build..."
          $NINJA_INSTALL_PATH = "${{ github.workspace }}\buildtools\ninja"
          New-Item -ItemType Directory -Force -Path "${NINJA_INSTALL_PATH}"
          Expand-Archive -LiteralPath "${NINJA_DL_PATH}" -DestinationPath "${NINJA_INSTALL_PATH}"
          # Export the NINJA executable path
          echo "NINJA_INSTALL_PATH=${NINJA_INSTALL_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Add CMAKE_DEFINES
          echo "CMAKE_DEFINES=-DCMAKE_C_COMPILER=${env:MINGW_PKG_PREFIX}-gcc -DCMAKE_CXX_COMPILER=${env:MINGW_PKG_PREFIX}-g++ -DCMAKE_RC_COMPILER=${env:MINGW_PKG_PREFIX}-windres -DCMAKE_ASM_MASM_COMPILER=${env:MINGW_ASM_MASM_COMPILER} -GNinja" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Installing Android SDK Dependencies
        if: ${{ env['ANDROID_API'] }}
        run: |
          export ANDROID_IMAGE="system-images;android-$ANDROID_API;google_apis;$ANDROID_ARCH"
          echo "Downloading ndk;$ANDROID_NDK and $ANDROID_IMAGE"
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install \
            "ndk;$ANDROID_NDK" "$ANDROID_IMAGE" | \
            grep -v "\[=" || true # suppress the progress bar, so we get meaningful logs

      - name: Starting Android Simulator
        if: ${{ env['ANDROID_API'] }}
        run: bash scripts/start-android.sh
        timeout-minutes: 10

      - name: Test
        shell: bash
        run: |
          pip install --upgrade --requirement tests/requirements.txt
          [ "${{ matrix.CC }}" ] && export CC="${{ matrix.CC }}"
          [ "${{ matrix.CXX }}" ] && export CXX="${{ matrix.CXX }}"
          pytest --capture=no --verbose tests

      - name: "Upload to codecov.io"
        if: ${{ contains(env['RUN_ANALYZER'], 'cov') }}
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # pin@v3
        with:
          directory: coverage

  archive:
    name: Create Release Archive
    runs-on: ubuntu-latest
    needs: [lint, test]
    # only run this on pushes, combined with the CI triggers, this will only
    # run on master or the release branch
    if: ${{ needs.test.result == 'success' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create source archive
        run: |
          rm -rf build .c* .e* .git* scripts Makefile external/breakpad/src/tools external/breakpad/src/processor
          zip -r sentry-native.zip .

      - name: Upload source artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}
          # When downloading artifacts, they are double-zipped:
          # https://github.com/actions/upload-artifact#zipped-artifact-downloads
          path: sentry-native.zip
